// authentication
const passport = require("passport");
const GoogleStrategy = require("passport-google-oauth20").Strategy; // only want the Strategy module

// get keys for google oauth, gets keys object
const keys = require("../config/keys");

/* Do not use require statements with mongoose because
if mongoose is required in multiple times it gets confused and throws an error because it thinks you already have made this collection or user */
// So do it differenty like this:
const mongoose = require("mongoose");
const User = mongoose.model("users"); // grabs that model without require

// this function will generate an identifying piece for this user to grab specific things like this users posts
passport.serializeUser((user, done) => {
  // done is a callback, null is for errors, and user.id is the identifying piece of information USER ID not PROFILE ID, notice difference in DB
  // after a user signs in we only care about our internal ID which is the user id not the profile id, that is just for signing in!
  done(null, user.id); // cannot assume user will have google id, but can assume it will have one generated by mongo
  // sends user id to deserialize user function
});

// this function will turn the id back into the user
passport.deserializeUser((id, done) => {
  // search over all the users, and return it with done
  // always use model class for searching
  User.findById(id).then(user => {
    done(null, user); // return user of that id
    // the user model instance is added to the req object as req.user
  });
});

// .use is generic register
passport.use(
  new GoogleStrategy(
    {
      clientID: keys.googleClientID,
      clientSecret: keys.googleClientSecret,
      // need url for where user should go on callback after they grant permission to our application on google auth page
      callbackURL: "/auth/google/callback",
      // have to authorize this callback url in the google oauth console.developors screen because of security reasons
      proxy: true // trust the proxy our request runs through so heroku callbacks to the correct url
    },
    async (accessToken, refreshToken, profile, done) => {
      // after authenticated on the next get request to google it will call this with the accessToken, aka callback function
      // console.log("access token", accessToken);
      // console.log("refresh token", refreshToken);
      // console.log("profile", profile);

      // check to see if user id already exists before saving it to DB so it does not overlap...mongoose query...asynchronous operation
      // using async await
      const existingUser = await User.findOne({
        googleId: profile.id
      });
      // get promise response
      if (existingUser) {
        // already have record
        // finish passport auth function
        return done(null, existingUser); // passes to serialize user so serialize can pull that user id
      }
      // we don't have a new record so make one
      const user = await new User({
        // creates new model instance of user
        googleId: profile.id
      }).save(); // have to save it to DB
      // get promise from save since asynchronize, then finish with response
      done(null, user); // passes to serialize user so serialize can get that id
    }
  )
); // create new instance of GoogleStrategy
